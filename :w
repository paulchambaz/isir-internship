import argparse
import pickle
from itertools import chain
from pathlib import Path

import matplotlib.pyplot as plt

COLORS = [
    "#7cb85d",    # sage green
    "#e67c5f",    # coral
    "#6b98d9",    # periwinkle
    "#4fb09a",    # seafoam
    "#b86dc7",    # lavender
    "#d4923a",    # amber
    "#8ba356",    # olive green
    "#df6980",    # rose
    "#5d8dd4",    # steel blue
    "#3cb295",    # teal
    "#c778b5",    # orchid
    "#c98f42",    # bronze
    "#79b859",    # forest green
    "#e17464",    # salmon
    "#758cd0",    # slate blue
    "#47a68e",    # moss green
    "#ba6fc9",    # plum
    "#cc8538",    # terracotta
    "#6fb762",    # lime green
    "#dd7159",    # brick red
    "#6887cc",    # cornflower
    "#39b187",    # jade
    "#b573c4",    # berry
    "#d18c34",    # golden
    "#85ad5a",    # khaki green
    "#e06e6d",    # coral red
    "#6d94d7",    # sky blue
    "#42ad92",    # teal green
    "#a97dc6",    # purple
    "#bf8841"     # rust
]


def display_graph(results: dict) -> None:
    if "metadata" in results:
        _ = results["metadata"]
        del results["metadata"]

    all_steps = sorted(
        set(
            chain.from_iterable(
                data["results"].keys() for _, data in results.items()
            )
        )
    )

    plt.figure(figsize=(12, 8))

    for i, ((method, n), data) in enumerate(results.items()):
        filtered_results = [
            (step, data["results"][step][0]) for step in all_steps
        ]
        steps, biases = map(list, zip(*filtered_results, strict=True))

        plt.plot(
            steps, biases, color=COLORS[i], label=f"{method} n={n}", linewidth=2
        )
        plt.axhline(y=0, color="black", linewidth=2)

    plt.xlabel("Training step")
    plt.ylabel("Bias")
    plt.grid(visible=True, alpha=0.25)
    plt.legend(loc="lower right")
    # plt.ylim(-10, 10)
    plt.tight_layout()

    plt.show()
    # directory = "paper/figures"
    # Path(directory).mkdir(parents=True, exist_ok=True)
    # plt.savefig(f"{directory}/bias_time.png", bbox_inches="tight", dpi=100)


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("--file", type=str, required=True)
    args = parser.parse_args()

    with open(args.file, "rb") as f:
        results = pickle.load(f)  # noqa:S301

    plt.rcParams["font.size"] = 20
    plt.rcParams["text.usetex"] = True
    plt.rcParams["font.family"] = "serif"
    plt.rcParams["text.latex.preamble"] = (
        r"\usepackage{amsmath}\usepackage{amssymb}"
    )

    display_graph(results)


if __name__ == "__main__":
    main()
