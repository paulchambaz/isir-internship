# Copyright (C) 2025 Paul Chambaz
# This file is part of isir

[project]
name = "isir"
version = "0.1.0"
description = "List of files used during isir internship"
readme = "README.md"
requires-python = ">=3.13"
license = { text = "GPL-3.0-or-later" }
authors = [{ name = "Paul Chambaz", email = "paul.chambaz@tutanota.com" }]
dependencies = [
  "dm-haiku>=0.0.14",
  "flax>=0.10.6",
  "gymnasium[classic-control,mujoco]>=1.1.1",
  "jax>=0.6.2",
  "matplotlib>=3.10.3",
  "networkx>=3.5",
  "numpy>=2.3.0",
  "omegaconf>=2.3.0",
  "scikit-learn>=1.7.0",
  "scipy>=1.15.3",
  "torch>=2.7.1",
  "tqdm>=4.67.1",
]

[project.scripts]
main = "tools.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/algos", "src/tools"]

[tool.ruff]
line-length = 80
target-version = "py313"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
  "E",    # pycodestyle errors
  "W",    # pycodestyle warnings
  "F",    # Pyflakes
  "I",    # isort
  "N",    # pep8-naming
  "UP",   # pyupgrade
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "SIM",  # flake8-simplify
  "RUF",  # Ruff-specific rules
  "ANN",  # flake8-annotations
  "S",    # flake8-bandit
  "FBT",  # flake8-boolean-trap
  "A",    # flake8-builtins
  "COM",  # flake8-commas
  "ISC",  # flake8-implicit-str-concat
  "ICN",  # flake8-import-conventions
  "PIE",  # flake8-pie
  "PT",   # flake8-pytest-style
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "TRY",  # tryceratops
  "PGH",  # pygrep-hooks
  "PL",   # Pylint
  "NPY",  # NumPy-specific rules
]
ignore = [
  "E501",    # Line too long (handled by formatter)
  "D",       # pydocstyle (entire category)
  "FIX002",  # Line contains TODO
  "T201",    # print found
  "S101",    # Use of assert detected
  "S603",    # subprocess call: check for execution of untrusted input
  "S607",    # Starting a process with a partial executable path
  "PLR2004", # Magic value used in comparison
  "PLR0913", # Too many arguments to function call
  "PLR0915", # Too many statements
  "BLE001",  # Do not catch blind exception
  "COM812",  # Avoid conflicts with formatter
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ty.src]
root = "src"

[tool.pytest.ini_options]
addopts = [
  "--cov=src",
  "--cov-report=term-missing",
  "--cov-fail-under=80",
  "--strict-markers",
  "--strict-config",
  "-ra",
]
testpaths = ["tests"]
pythonpath = ["src"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.ruff.lint.isort]
known-first-party = ["src", "tests"]

[dependency-groups]
dev = ["pytest>=8.4.0", "pytest-cov>=6.1.1", "pytest-xdist>=3.7.0"]
